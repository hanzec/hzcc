stages:
  - dependency_build
  - dependency_push
  - build
  - unit_test
  - end_to_end_test
  - documentation

variables:
  DOCKER_TLS_CERTDIR: "/certs"


#####################################################################################################
## Dependency Build                                                                         #########
#####################################################################################################
build_llvm_latest:
  tags:
    - docker
  stage: dependency_build
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE/llvm_latest:latest
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY_IMAGE/llvm_latest:$CI_COMMIT_SHA
      - < docker/llvm_latest.dockerfile
    - docker push $CI_REGISTRY_IMAGE/llvm_latest:$CI_COMMIT_SHA
  services:
    - docker:dind
  rules:
    - changes:
        - docker/llvm_latest.dockerfile

push_llvm_latest:
  tags:
    - docker
  variables:
    GIT_STRATEGY: none
  stage: dependency_push
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - docker pull $CI_REGISTRY_IMAGE/llvm_latest:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/llvm_latest:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/llvm_latest:latest
    - docker push $CI_REGISTRY_IMAGE/llvm_latest:latest
  services:
    - docker:dind
  rules:
    - changes:
        - docker/llvm_latest.dockerfile
  needs:
    - build_llvm_latest

build_gcc_10_3_latest:
  tags:
    - docker
  stage: dependency_build
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE/gcc_10_3:latest
      --label "org.opencontainers.image.title=$CI_PROJECT_TITLE"
      --label "org.opencontainers.image.url=$CI_PROJECT_URL"
      --label "org.opencontainers.image.created=$CI_JOB_STARTED_AT"
      --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
      --label "org.opencontainers.image.version=$CI_COMMIT_REF_NAME"
      --tag $CI_REGISTRY_IMAGE/gcc_10_3:$CI_COMMIT_SHA
      - < docker/gcc_10_3.dockerfile
    - docker push $CI_REGISTRY_IMAGE/gcc_10_3:$CI_COMMIT_SHA
  services:
    - docker:dind
  rules:
    - changes:
        - docker/gcc_10_3.dockerfile

push_gcc_10_latest:
  tags:
    - docker
  variables:
    GIT_STRATEGY: none
  stage: dependency_push
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - docker pull $CI_REGISTRY_IMAGE/gcc_10_3:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/gcc_10_3:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/gcc_10_3:latest
    - docker push $CI_REGISTRY_IMAGE/gcc_10_3:latest
  services:
    - docker:dind
  rules:
    - changes:
        - docker/gcc_10_3.dockerfile
  needs:
    - build_gcc_10_3_latest

#####################################################################################################
## Binary Build Test                                                                         ########
#####################################################################################################
build_gcc_10_3_ninja_debug:
  stage: build
  image: $CI_REGISTRY_IMAGE/gcc_10_3:latest
  tags:
    - docker
  script:
    - cd $CI_PROJECT_DIR
    - >
      cmake . 
      -G Ninja
      -B./build/
      -DCMAKE_BUILD_TYPE=Debug
      -D CMAKE_C_COMPILER=gcc
      -D CMAKE_CXX_COMPILER=g++
    - cd ./build && ninja -j$(nproc) mycc
  needs:
    - job: push_gcc_10_latest
      optional: true
    - job: build_gcc_10_3_latest
      optional: true
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

build_llvm_latest_ninja_debug:
  stage: build
  image: $CI_REGISTRY_IMAGE/llvm_latest:latest
  tags:
    - docker
  script:
    - cd $CI_PROJECT_DIR
    - >
      cmake . 
      -G Ninja
      -B./build/
      -DCMAKE_BUILD_TYPE=Debug
      -D CMAKE_C_COMPILER=clang
      -D CMAKE_CXX_COMPILER=clang++
    - cd ./build && ninja -j$(nproc) mycc
  needs:
    - job: push_llvm_latest
      optional: true
    - job: build_llvm_latest
      optional: true
  cache:
    - key: "llvm_latest_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

#####################################################################################################
## Binary Unit Test                                                                          ########
#####################################################################################################
test_gcc_10_3_debug:
  image: $CI_REGISTRY_IMAGE/gcc_10_3:latest
  stage: unit_test
  tags:
    - docker
  variables:
    GTEST_OUTPUT: "xml:$CI_PROJECT_DIR/gtest_report.xml"
  script:
    - cd $CI_PROJECT_DIR
    - >
      cmake .
      -G Ninja
      -B./build/                   
      -DENABLE_TESTING=ON                
      -DENABLE_COVERAGE=ON               
      -DENABLE_DOCUMENTATION=OFF         
      -D CMAKE_C_COMPILER=gcc
      -D CMAKE_CXX_COMPILER=g++
      -DCMAKE_BUILD_TYPE=Debug -G Ninja
    - cd ./build && ninja -j$(nproc) ccov-export-mycc_test
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/gtest_report.xml
      cobertura: $CI_PROJECT_DIR/build/ccov/mycc_test.xml
  needs:
    - build_gcc_10_3_ninja_debug
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

test_llvm_latest_debug:
  image: $CI_REGISTRY_IMAGE/llvm_latest:latest
  stage: unit_test
  tags:
    - docker
  variables:
    GTEST_OUTPUT: "xml:$CI_PROJECT_DIR/gtest_report.xml"
  script:
    - cd $CI_PROJECT_DIR
    - >
      cmake . 
      -G Ninja
      -B./build/                   
      -DENABLE_TESTING=ON                
      -DENABLE_COVERAGE=ON               
      -DENABLE_DOCUMENTATION=OFF         
      -D CMAKE_C_COMPILER=clang
      -D CMAKE_CXX_COMPILER=clang++
      -DCMAKE_BUILD_TYPE=Debug -G Ninja
    - cd ./build && ninja -j$(nproc) ccov-export-mycc_test
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/gtest_report.xml
      cobertura: $CI_PROJECT_DIR/build/ccov/mycc_test.xml
  needs:
    - build_llvm_latest_ninja_debug
  cache:
    - key: "llvm_latest_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

test_gcc_10_3_release:
  image: $CI_REGISTRY_IMAGE/gcc_10_3:latest
  stage: unit_test
  tags:
    - docker
  variables:
    GTEST_OUTPUT: "xml:$CI_PROJECT_DIR/gtest_report.xml"
  script:
    - cd $CI_PROJECT_DIR
    - >
      cmake . 
      -G Ninja
      -B./build/                   
      -DENABLE_TESTING=ON                
      -DENABLE_COVERAGE=ON               
      -DENABLE_DOCUMENTATION=OFF
      -D CMAKE_C_COMPILER=gcc
      -D CMAKE_CXX_COMPILER=g++
      -DCMAKE_BUILD_TYPE=Release -G Ninja
    - cd ./build && ninja -j$(nproc) ccov-export-mycc_test
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/gtest_report.xml
      cobertura: $CI_PROJECT_DIR/build/ccov/mycc_test.xml
  needs:
    - build_gcc_10_3_ninja_debug
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

test_llvm_latest_release:
  image: $CI_REGISTRY_IMAGE/llvm_latest:latest
  stage: unit_test
  tags:
    - docker
  variables:
    GTEST_OUTPUT: "xml:$CI_PROJECT_DIR/gtest_report.xml"
  script:
    - cd $CI_PROJECT_DIR
    - >
      cmake .
      -G Ninja
      -B./build/                   
      -DENABLE_TESTING=ON                
      -DENABLE_COVERAGE=ON               
      -DENABLE_DOCUMENTATION=OFF         
      -D CMAKE_C_COMPILER=clang
      -D CMAKE_CXX_COMPILER=clang++
      -DCMAKE_BUILD_TYPE=Release -G Ninja
    - cd ./build && ninja -j$(nproc) ccov-export-mycc_test
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/gtest_report.xml
      cobertura: $CI_PROJECT_DIR/build/ccov/mycc_test.xml
  needs:
    - build_llvm_latest_ninja_debug
  cache:
    - key: "llvm_latest_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

#####################################################################################################
## End2End Tests                                                                             ########
#####################################################################################################
e2e_test_gcc_10_3_release:
  image: $CI_REGISTRY_IMAGE/gcc_10_3:latest
  stage: end_to_end_test
  tags:
    - docker
  script:
    - cd $CI_PROJECT_DIR
    - |
      cmake . -B./build/                   \
        -DENABLE_TESTING=ON                \
        -DENABLE_E2E_TESTING=ON            \
        -DENABLE_DOCUMENTATION=OFF         \
        -DCMAKE_BUILD_TYPE=Release -G Ninja
    - cd ./build && ninja -j$(nproc) mycc_e2e_test
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/build/Test/test_output/*.xunit.xml
  needs:
    - test_gcc_10_3_debug
    - test_gcc_10_3_release
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

e2e_test_llvm_latest_release:
  image: $CI_REGISTRY_IMAGE/llvm_latest:latest
  stage: end_to_end_test
  tags:
    - docker
  script:
    - cd $CI_PROJECT_DIR
    - |
      cmake . -B./build/                   \
        -DENABLE_TESTING=ON                \
        -DENABLE_E2E_TESTING=ON            \
        -DENABLE_DOCUMENTATION=OFF         \
        -DCMAKE_BUILD_TYPE=Release -G Ninja
    - cd ./build && ninja -j$(nproc) mycc_e2e_test
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/build/Test/test_output/*.xunit.xml
  needs:
    - test_llvm_latest_debug
    - test_llvm_latest_release
  cache:
    - key: "llvm_latest_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

#####################################################################################################
## Documentation                                                                             ########
#####################################################################################################
build_latex_documentation:
  image: $CI_REGISTRY_IMAGE/gcc_10_3:latest
  stage: documentation
  tags:
    - docker
  only:
    - main
  script:
    - cd $CI_PROJECT_DIR
    - cmake . -B./build/ -DCMAKE_BUILD_TYPE=Release -G Ninja && cd ./build && ninja -j$(nproc) documentation
    - mv $CI_PROJECT_DIR/build/Documentation/developers.pdf $CI_PROJECT_DIR/developers.pdf
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/developers.pdf
  needs:
    - e2e_test_gcc_10_3_release
    - e2e_test_llvm_latest_release
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

#####################################################################################################
## Gitlab Pages API Document                                                                 ########
#####################################################################################################
pages:
  image: $CI_REGISTRY_IMAGE/gcc_10_3:latest
  stage: documentation
  tags:
    - docker
  only:
    - main
  script:
    - cd $CI_PROJECT_DIR
    - cmake . -B./build/ -DCMAKE_BUILD_TYPE=Release -G Ninja && cd ./build && ninja -j$(nproc) doc_doxygen
  artifacts:
    paths:
      - $CI_PROJECT_DIR/build/doxygen_html
  needs:
    - e2e_test_gcc_10_3_release
    - e2e_test_llvm_latest_release
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"