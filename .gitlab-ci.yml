stages:
  - build
  - unit_test
  - end_to_end_test
  - documentation

variables:
  CMAKE_VERSION: "3.16.3"

.install_gcovr: &install_gcovr
  before_script:
    - apt-get -qq update
    - apt-get -qq install -y python3 python3-pip
    - pip3 install gcovr

.install_lcov_cobertura: &install_lcov_cobertura
  before_script:
    - apt-get -qq update
    - apt-get -qq install -y python3 python3-pip
    - pip3 install lcov_cobertura

.install_vcpkg_dep: &install_vcpkg_dep
  before_script:
    - apt-get -qq update
    - apt-get -qq install -y curl zip unzip tar pkg-config cmake # install vcpkg dependencies

.install_latex_dep: &install_latex_dep
  before_script:
    - apt-get -qq update
    - apt-get -qq install -y texlive-base texlive-latex-recommended texlive-latex-extra

.install_ninja_build: &install_ninja_build
  before_script:
    - apt-get -qq update
    - apt-get -qq install -y ninja-build

.install_llvm_lit: &install_llvm_lit
  before_script:
    - apt-get -qq update
    - apt-get -qq install -y python3 python3-pip
    - pip3 install lit

.install_cmake_3_16_0: &install_cmake_3_16_0
  before_script:
    - apt-get -qq update
    - apt-get -qq install -y git wget
    - mkdir -p /tmp && cd /tmp
    - wget -q "https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-linux-x86_64.sh" -P /tmp
    - chmod +x /tmp/cmake-$CMAKE_VERSION-linux-x86_64.sh
    - /tmp/cmake-$CMAKE_VERSION-linux-x86_64.sh --skip-license --prefix=/usr/local

.testing_default: &testing_default
  before_script:
    - !reference [ .install_gcovr, before_script ]
    - !reference [ .install_vcpkg_dep, before_script ]
    - !reference [ .install_ninja_build, before_script ]
    - !reference [ .install_cmake_3_16_0, before_script ]
    - !reference [ .install_lcov_cobertura, before_script ]

.e2e_testing_default: &e2e_testing_default
  before_script:
    - !reference [ .install_llvm_lit, before_script ]
    - !reference [ .install_vcpkg_dep, before_script ]
    - !reference [ .install_ninja_build, before_script ]
    - !reference [ .install_cmake_3_16_0, before_script ]

.compile_default: &compile_default
  before_script:
    - !reference [ .install_vcpkg_dep, before_script ]
    - !reference [ .install_cmake_3_16_0, before_script ]

.documentation_default: &documentation_default
  before_script:
    - !reference [ .install_vcpkg_dep, before_script ]
    - !reference [ .install_latex_dep, before_script ]
    - !reference [ .install_ninja_build, before_script ]
    - !reference [ .install_cmake_3_16_0, before_script ]

build_gcc_10_3_ninja_debug:
  <<: *compile_default
  stage: build
  image: gcc:10.3
  tags:
    - docker
  script:
    - apt-get -qq update
    - cd $CI_PROJECT_DIR
    - apt-get -qq install -y ninja-build # install ninja
    - cmake . -B./build/ -DCMAKE_BUILD_TYPE=Debug -G Ninja && cd ./build && ninja -j$(nproc) mycc
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

test_gcc_10_3_debug:
  <<: *testing_default
  image: gcc:10.3
  stage: unit_test
  tags:
    - docker
  variables:
    GTEST_OUTPUT: "xml:$CI_PROJECT_DIR/gtest_report.xml"
  script:
    - cd $CI_PROJECT_DIR
    - |
      cmake . -B./build/                   \
        -DENABLE_TESTING=ON                \
        -DENABLE_COVERAGE=ON               \
        -DENABLE_DOCUMENTATION=OFF         \
        -DCMAKE_BUILD_TYPE=Debug -G Ninja
    - cd ./build && ninja -j$(nproc) ccov-export-mycc_test
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/gtest_report.xml
      cobertura: $CI_PROJECT_DIR/build/ccov/mycc_test.xml
  needs:
    - build_gcc_10_3_ninja_debug
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

test_gcc_10_3_release:
  <<: *testing_default
  image: gcc:10.3
  stage: unit_test
  tags:
    - docker
  variables:
    GTEST_OUTPUT: "xml:$CI_PROJECT_DIR/gtest_report.xml"
  script:
    - cd $CI_PROJECT_DIR
    - |
      cmake . -B./build/                   \
        -DENABLE_TESTING=ON                \
        -DENABLE_COVERAGE=ON               \
        -DENABLE_DOCUMENTATION=OFF         \
        -DCMAKE_BUILD_TYPE=Release -G Ninja
    - cd ./build && ninja -j$(nproc) ccov-export-mycc_test
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/gtest_report.xml
      cobertura: $CI_PROJECT_DIR/build/ccov/mycc_test.xml
  needs:
    - build_gcc_10_3_ninja_debug
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

e2e_test_gcc_10_3_release:
  <<: *e2e_testing_default
  image: gcc:10.3
  stage: end_to_end_test
  tags:
    - docker
  script:
    - cd $CI_PROJECT_DIR
    - |
      cmake . -B./build/                   \
        -DENABLE_TESTING=ON                \
        -DENABLE_E2E_TESTING=ON            \
        -DENABLE_DOCUMENTATION=OFF         \
        -DCMAKE_BUILD_TYPE=Release -G Ninja
    - cd ./build && ninja -j$(nproc) mycc_e2e_test
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/build/Test/test_output/*.xunit.xml
  needs:
    - test_gcc_10_3_debug
    - test_gcc_10_3_release
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"

build_latex_documentation:
  <<: *documentation_default
  image: gcc:10.3
  stage: documentation
  tags:
    - docker
  only:
    - master
  script:
    - cd $CI_PROJECT_DIR
    - cmake . -B./build/ -DCMAKE_BUILD_TYPE=Release -G Ninja && cd ./build && ninja -j$(nproc) documentation
    - mv $CI_PROJECT_DIR/build/Documentation/developers.pdf $CI_PROJECT_DIR/developers.pdf
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/developers.pdf\
  cache:
    - key: "gcc_10_3_deps($CI_RUNNER_ID)"
      paths:
        - "$CI_PROJECT_DIR/build/_deps"
        - "$CI_PROJECT_DIR/build/vcpkg_installed"