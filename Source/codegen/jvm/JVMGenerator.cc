//
// Created by chen_ on 2022/4/10.
//

#include "JVMGenerator.h"

#include <glog/logging.h>

#include <filesystem>
#include <fstream>

#include "AST/CompilationUnit.h"
#include "const_code_block.h"
#include "utils/logging.h"
#include "version.h"
namespace Hzcc::Codegen {
Status JVMGenerator::Generate(const std::string& output,
                              AST::CompilationUnit& unit) {
    // output file name will be replaced by the input file with .class
    _intput_file_name = unit.GetFileName();
    std::filesystem::path input_path(unit.GetFileName());
    DVLOG(CODE_GEN_LEVEL) << "input file: " << unit.GetFileName()
                          << ", output file: " << output;

    // generate class file
    std::ofstream output_file(output);

    // write class file header
    output_file << ";; Generated by Hzcc" << FULL_VERSION << "\n"
                << ";; From Language: c\n"
                << ";; Source Path: " << unit.GetFileName() << "\n";

    // write class file body
    output_file << ".class public " << input_path.replace_extension().filename()
                << "\n"
                << ".super java/lang/Object\n";

    // generate class body
    for (auto& ast_node : unit.GetDecls()) {
        if(ast_node.second->IsFuncDecl()){
            ast_node.second->visit(*this);
        }
    }

    // write class file tail
    output_file << kConstSpecialMethod;
    output_file.close();

    return Status::OkStatus();
}

void JVMGenerator::IncLindeIndent() { _indent += _indent_str; }

void JVMGenerator::DecLindeIndent() {
    _indent = _indent.substr(0, _indent.size() - 4);
}

const std::string& JVMGenerator::GetLineIndent() const { return _indent; }

int JVMGenerator::PushReturnStack() { return 0; }

int JVMGenerator::ConsumeReturnStack() { return 0; }

std::pair<int, char> JVMGenerator::GetStack(std::string name) {
    return std::pair<int, char>(0, 0);
}

int JVMGenerator::BindStack(std::string name, char type, bool is_local) {
    return 0;
}

void JVMGenerator::AddToCache(const std::string& output) {
    _output << _indent << output << std::endl;
}
void JVMGenerator::EnableGenerateLoad() { _generate_load = true; }
void JVMGenerator::DisableGenerateLoad() { _generate_load = false; }
bool JVMGenerator::GetGenerateLoadStatus() const { return _generate_load; }
const std::string& JVMGenerator::GetInputFileName() {
    DLOG_ASSERT(!_intput_file_name.empty())
        << "Call GetInputFileName without setting up the input file name!";
    return _intput_file_name;
}

}  // namespace Hzcc::Codegen
